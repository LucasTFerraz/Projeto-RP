E:\Users\lucas\AppData\Local\Programs\Python\Python313\python.exe E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_res20.py 
E:\Projects
E:\Projects\Python/RP/Hybrid-Coding-SNN-main/
E:\Projects\Python/RP/Hybrid-Coding-SNN-main/
T
GPU is available
Epochs : 15
Accuracy of pre-trained model 0.474
ResNet20(
  (conv1): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv2): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv3): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (layer4): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer5): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer6): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential(
      (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
  )
  (layer7): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer8): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential(
      (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
  )
  (layer9): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer10): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential(
      (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
  )
  (layer11): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (pool12): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (fc13): Sequential(
    (0): Linear(in_features=512, out_features=4096, bias=True)
    (1): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (linear): Linear(in_features=4096, out_features=10, bias=False)
)
Accuracy of BN folded ANN model 0.4693333333333333
Accuracy of converted SNN model tensor([0.0000, 0.0000, 0.2317, 0.3333, 0.3333, 0.3330, 0.3333, 0.3347, 0.3367,
        0.3417, 0.3467, 0.3483, 0.3520, 0.3590, 0.3687, 0.3787],
       device='cuda:0')
------ Stage 1 - Training Hidden Layers ------
Start 0
Trained 0
Stage1, Epoch 1 takes 8m 24s
Train Accuracy: 0.406533, Loss: 189.126698
Test Accuracy: tensor([0.0000, 0.1093, 0.4043, 0.4210, 0.4370, 0.4437, 0.4443, 0.4460, 0.4470,
        0.4500, 0.4563, 0.4580, 0.4583, 0.4587, 0.4613, 0.4657],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.465667
Start 1
Trained 1
Stage1, Epoch 2 takes 7m 47s
Train Accuracy: 0.470000, Loss: 86.986761
Test Accuracy: tensor([0.0000, 0.2460, 0.4220, 0.4360, 0.4443, 0.4540, 0.4517, 0.4643, 0.4647,
        0.4663, 0.4697, 0.4743, 0.4770, 0.4757, 0.4767, 0.4773],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.477333
Start 2
Trained 2
Stage1, Epoch 3 takes 8m 17s
Train Accuracy: 0.482133, Loss: 68.035029
Test Accuracy: tensor([0.0000, 0.3837, 0.4183, 0.4417, 0.4580, 0.4677, 0.4753, 0.4823, 0.4887,
        0.4907, 0.4913, 0.4910, 0.4930, 0.4923, 0.4940, 0.4973],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.497333
Start 3
Trained 3
Stage1, Epoch 4 takes 8m 1s
Train Accuracy: 0.492333, Loss: 60.325476
Test Accuracy: tensor([0.0000, 0.3840, 0.4187, 0.4350, 0.4477, 0.4553, 0.4573, 0.4600, 0.4607,
        0.4630, 0.4643, 0.4663, 0.4673, 0.4670, 0.4673, 0.4700],
       device='cuda:0')
Best Test Accuracy: 0.497333
Start 4
Trained 4
Stage1, Epoch 5 takes 7m 57s
Train Accuracy: 0.492333, Loss: 56.143856
Test Accuracy: tensor([0.0040, 0.4013, 0.4313, 0.4517, 0.4630, 0.4703, 0.4777, 0.4817, 0.4857,
        0.4853, 0.4850, 0.4887, 0.4930, 0.4940, 0.4940, 0.4943],
       device='cuda:0')
Best Test Accuracy: 0.497333
Start 5
Trained 5
Stage1, Epoch 6 takes 8m 7s
Train Accuracy: 0.492000, Loss: 54.038986
Test Accuracy: tensor([0.0020, 0.4117, 0.4367, 0.4533, 0.4610, 0.4703, 0.4770, 0.4820, 0.4873,
        0.4897, 0.4913, 0.4923, 0.4930, 0.4940, 0.4937, 0.4927],
       device='cuda:0')
Best Test Accuracy: 0.497333
Start 6
Trained 6
Stage1, Epoch 7 takes 7m 30s
Train Accuracy: 0.483467, Loss: 51.843002
Test Accuracy: tensor([0.0047, 0.4263, 0.4593, 0.4710, 0.4830, 0.4890, 0.4900, 0.4897, 0.4877,
        0.4880, 0.4873, 0.4857, 0.4867, 0.4873, 0.4863, 0.4843],
       device='cuda:0')
Best Test Accuracy: 0.497333
Start 7
Trained 7
Stage1, Epoch 8 takes 7m 29s
Train Accuracy: 0.493667, Loss: 48.594652
Test Accuracy: tensor([0.0050, 0.4260, 0.4573, 0.4700, 0.4817, 0.4877, 0.4903, 0.4907, 0.4937,
        0.4927, 0.4943, 0.4930, 0.4907, 0.4917, 0.4920, 0.4927],
       device='cuda:0')
Best Test Accuracy: 0.497333
Start 8
Trained 8
Stage1, Epoch 9 takes 8m 7s
Train Accuracy: 0.499600, Loss: 48.177485
Test Accuracy: tensor([0.0027, 0.4077, 0.4353, 0.4507, 0.4577, 0.4680, 0.4727, 0.4800, 0.4813,
        0.4817, 0.4820, 0.4843, 0.4863, 0.4877, 0.4880, 0.4890],
       device='cuda:0')
Best Test Accuracy: 0.497333
Start 9
Trained 9
Stage1, Epoch 10 takes 7m 54s
Train Accuracy: 0.506067, Loss: 46.166662
Test Accuracy: tensor([0.0113, 0.4270, 0.4573, 0.4780, 0.4977, 0.5097, 0.5123, 0.5117, 0.5110,
        0.5143, 0.5137, 0.5123, 0.5107, 0.5110, 0.5133, 0.5157],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.515667
Start 10
Trained 10
Stage1, Epoch 11 takes 8m 4s
Train Accuracy: 0.489200, Loss: 46.933459
Test Accuracy: tensor([0.0123, 0.4143, 0.4350, 0.4487, 0.4547, 0.4587, 0.4627, 0.4693, 0.4710,
        0.4727, 0.4750, 0.4750, 0.4773, 0.4783, 0.4777, 0.4773],
       device='cuda:0')
Best Test Accuracy: 0.515667
Start 11
Trained 11
Stage1, Epoch 12 takes 7m 55s
Train Accuracy: 0.503867, Loss: 44.533717
Test Accuracy: tensor([0.0060, 0.4147, 0.4617, 0.4757, 0.4890, 0.4870, 0.4973, 0.5023, 0.5077,
        0.5133, 0.5137, 0.5153, 0.5117, 0.5170, 0.5180, 0.5150],
       device='cuda:0')
Best Test Accuracy: 0.515667
Start 12
Trained 12
Stage1, Epoch 13 takes 7m 31s
Train Accuracy: 0.498800, Loss: 44.306463
Test Accuracy: tensor([0.0057, 0.4370, 0.4747, 0.4927, 0.4987, 0.5130, 0.5153, 0.5160, 0.5120,
        0.5143, 0.5123, 0.5157, 0.5150, 0.5117, 0.5087, 0.5063],
       device='cuda:0')
Best Test Accuracy: 0.515667
Start 13
Trained 13
Stage1, Epoch 14 takes 8m 7s
Train Accuracy: 0.507733, Loss: 46.307207
Test Accuracy: tensor([0.0047, 0.4223, 0.4897, 0.5020, 0.5057, 0.5093, 0.5080, 0.5087, 0.5073,
        0.5060, 0.5047, 0.5067, 0.5040, 0.5050, 0.5047, 0.5067],
       device='cuda:0')
Best Test Accuracy: 0.515667
Start 14
Trained 14
Stage1, Epoch 15 takes 8m 25s
Train Accuracy: 0.507733, Loss: 47.543386
Test Accuracy: tensor([0.0110, 0.4063, 0.4427, 0.4540, 0.4700, 0.4707, 0.4753, 0.4813, 0.4820,
        0.4867, 0.4863, 0.4903, 0.4920, 0.4940, 0.4943, 0.4977],
       device='cuda:0')
Best Test Accuracy: 0.515667
------ Stage 2 - Training Output Layer ------
Batch 100, Train Acc 0.0000, Train Loss nan, Avg spike time 15.8793, spike probability 0.0015
Train loss:  nan nan
Stage2, Epoch 1 takes 0m 59s
Train Accuracy: 0.0000, Loss: nan
Test Accuracy: 0.0000, Test spiking time: 1.0000
Accuracy: 0.0000, Average spike time: 1.0000, Best acc: 0.5157, Best acc spike time: 16.0000
Traceback (most recent call last):
  File "E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_res20.py", line 243, in <module>
    'best_acc': best_test_acc.item(),
                ^^^^^^^^^^^^^^^^^^
AttributeError: 'float' object has no attribute 'item'

Process finished with exit code 1