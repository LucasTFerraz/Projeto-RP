E:\Users\lucas\AppData\Local\Programs\Python\Python313\python.exe E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_res20.py
E:\Projects
E:\Projects\Python/RP/Hybrid-Coding-SNN-main/
E:\Projects\Python/RP/Hybrid-Coding-SNN-main/
T
GPU is available
Epochs : 15
Accuracy of pre-trained model 0.9284
ResNet20(
  (conv1): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv2): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv3): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (layer4): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer5): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer6): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential(
      (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
  )
  (layer7): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer8): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential(
      (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
  )
  (layer9): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer10): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential(
      (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
  )
  (layer11): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (pool12): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (fc13): Sequential(
    (0): Linear(in_features=512, out_features=4096, bias=True)
    (1): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (linear): Linear(in_features=4096, out_features=10, bias=False)
)
Accuracy of BN folded ANN model 0.9285
Accuracy of converted SNN model tensor([0.1000, 0.1000, 0.1000, 0.1000, 0.1020, 0.1327, 0.1561, 0.1684, 0.1922,
        0.2283, 0.2651, 0.3055, 0.3494, 0.3960, 0.4436, 0.4890],
       device='cuda:0')
------ Stage 1 - Training Hidden Layers ------
Start 0
Trained 0
Stage1, Epoch 1 takes 26m 59s
Train Accuracy: 0.637700, Loss: 22.668040
Test Accuracy: tensor([0.1000, 0.3279, 0.6021, 0.7168, 0.7747, 0.8046, 0.8248, 0.8377, 0.8476,
        0.8536, 0.8580, 0.8608, 0.8631, 0.8648, 0.8659, 0.8678],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.867800
Start 1
Trained 1
Stage1, Epoch 2 takes 23m 49s
Train Accuracy: 0.752860, Loss: 11.830260
Test Accuracy: tensor([0.1000, 0.5317, 0.7422, 0.8091, 0.8392, 0.8564, 0.8685, 0.8759, 0.8800,
        0.8822, 0.8826, 0.8839, 0.8850, 0.8842, 0.8853, 0.8856],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.885600
Start 2
Trained 2
Stage1, Epoch 3 takes 23m 30s
Train Accuracy: 0.771100, Loss: 9.165660
Test Accuracy: tensor([0.1000, 0.5852, 0.7674, 0.8152, 0.8371, 0.8471, 0.8561, 0.8598, 0.8645,
        0.8671, 0.8676, 0.8682, 0.8680, 0.8687, 0.8701, 0.8706],
       device='cuda:0')
Best Test Accuracy: 0.885600
Start 3
Trained 3
Stage1, Epoch 4 takes 24m 19s
Train Accuracy: 0.778040, Loss: 7.894277
Test Accuracy: tensor([0.1000, 0.6961, 0.8174, 0.8515, 0.8665, 0.8742, 0.8797, 0.8825, 0.8854,
        0.8868, 0.8883, 0.8884, 0.8891, 0.8890, 0.8891, 0.8891],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.889100
Start 4
Trained 4
Stage1, Epoch 5 takes 26m 20s
Train Accuracy: 0.784180, Loss: 6.875044
Test Accuracy: tensor([0.1000, 0.7266, 0.8517, 0.8720, 0.8803, 0.8840, 0.8862, 0.8873, 0.8876,
        0.8884, 0.8880, 0.8894, 0.8898, 0.8903, 0.8909, 0.8908],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.890800
Start 5
Trained 5
Stage1, Epoch 6 takes 24m 44s
Train Accuracy: 0.784800, Loss: 6.513151
Test Accuracy: tensor([0.1000, 0.7214, 0.8290, 0.8553, 0.8652, 0.8695, 0.8732, 0.8743, 0.8770,
        0.8783, 0.8788, 0.8789, 0.8796, 0.8803, 0.8803, 0.8814],
       device='cuda:0')
Best Test Accuracy: 0.890800
Start 6
Trained 6
Stage1, Epoch 7 takes 24m 41s
Train Accuracy: 0.793080, Loss: 6.046576
Test Accuracy: tensor([0.1000, 0.7200, 0.8354, 0.8670, 0.8793, 0.8847, 0.8874, 0.8902, 0.8917,
        0.8932, 0.8945, 0.8949, 0.8947, 0.8951, 0.8955, 0.8948],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.894800
Start 7
Trained 7
Stage1, Epoch 8 takes 24m 52s
Train Accuracy: 0.799240, Loss: 5.699848
Test Accuracy: tensor([0.1000, 0.7681, 0.8363, 0.8524, 0.8613, 0.8687, 0.8725, 0.8743, 0.8764,
        0.8774, 0.8781, 0.8781, 0.8786, 0.8790, 0.8797, 0.8807],
       device='cuda:0')
Best Test Accuracy: 0.894800
Start 8
Trained 8
Stage1, Epoch 9 takes 23m 40s
Train Accuracy: 0.798700, Loss: 5.597216
Test Accuracy: tensor([0.1000, 0.7267, 0.8466, 0.8743, 0.8832, 0.8889, 0.8918, 0.8922, 0.8943,
        0.8947, 0.8961, 0.8952, 0.8952, 0.8955, 0.8954, 0.8946],
       device='cuda:0')
Best Test Accuracy: 0.894800
Start 9
Trained 9
Stage1, Epoch 10 takes 24m 54s
Train Accuracy: 0.799320, Loss: 5.639237
Test Accuracy: tensor([0.1000, 0.6652, 0.7970, 0.8371, 0.8558, 0.8640, 0.8675, 0.8699, 0.8724,
        0.8748, 0.8758, 0.8765, 0.8776, 0.8780, 0.8778, 0.8783],
       device='cuda:0')
Best Test Accuracy: 0.894800
Start 10
Trained 10
Stage1, Epoch 11 takes 24m 38s
Train Accuracy: 0.806520, Loss: 5.112916
Test Accuracy: tensor([0.1000, 0.7800, 0.8616, 0.8800, 0.8863, 0.8896, 0.8919, 0.8923, 0.8930,
        0.8947, 0.8949, 0.8952, 0.8953, 0.8949, 0.8949, 0.8946],
       device='cuda:0')
Best Test Accuracy: 0.894800
Start 11
Trained 11
Stage1, Epoch 12 takes 23m 8s
Train Accuracy: 0.816480, Loss: 4.795450
Test Accuracy: tensor([0.1000, 0.8130, 0.8770, 0.8940, 0.8996, 0.9027, 0.9038, 0.9061, 0.9060,
        0.9073, 0.9066, 0.9065, 0.9055, 0.9050, 0.9046, 0.9042],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.904200
Start 12
Trained 12
Stage1, Epoch 13 takes 24m 15s
Train Accuracy: 0.816660, Loss: 4.732447
Test Accuracy: tensor([0.1000, 0.8013, 0.8737, 0.8894, 0.8957, 0.8997, 0.9018, 0.9029, 0.9024,
        0.9031, 0.9028, 0.9027, 0.9025, 0.9019, 0.9022, 0.9024],
       device='cuda:0')
Best Test Accuracy: 0.904200
Start 13
Trained 13
Stage1, Epoch 14 takes 25m 48s
Train Accuracy: 0.822120, Loss: 4.495677
Test Accuracy: tensor([0.1000, 0.7935, 0.8437, 0.8610, 0.8662, 0.8684, 0.8696, 0.8701, 0.8710,
        0.8728, 0.8734, 0.8733, 0.8735, 0.8727, 0.8725, 0.8725],
       device='cuda:0')
Best Test Accuracy: 0.904200
Start 14
Trained 14
Stage1, Epoch 15 takes 23m 59s
Train Accuracy: 0.811940, Loss: 4.739612
Test Accuracy: tensor([0.1000, 0.7905, 0.8609, 0.8835, 0.8927, 0.8960, 0.8984, 0.8995, 0.9008,
        0.9024, 0.9021, 0.9024, 0.9037, 0.9033, 0.9034, 0.9036],
       device='cuda:0')
Best Test Accuracy: 0.904200
------ Stage 2 - Training Output Layer ------
Batch 100, Train Acc 71.1328, Train Loss 1.9416, Avg spike time 11.1590, spike probability 0.0500
Batch 200, Train Acc 77.6094, Train Loss 1.4848, Avg spike time 9.7583, spike probability 0.0616
Batch 300, Train Acc 79.7370, Train Loss 1.3202, Avg spike time 9.2543, spike probability 0.0655
Train loss 0:  1.2410456001606134
Train loss:  0.6166470276425257 0.0077515447996390026
Train correct / total:  391 50000
Stage2, Epoch 1 takes 3m 8s
Train Accuracy: 0.8073, Loss: 1.2410
Test Accuracy: 0.9161, Test spiking time: 4.6215
Saving the model.
Accuracy: 0.9161, Average spike time: 4.6215, Best acc: 0.9161, Best acc spike time: 4.6215
Traceback (most recent call last):
  File "E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_res20.py", line 248, in <module>
    dump_json(training_record, snn_ckp_dir + 'record', 'cifar10_res20_record_TTFS.pth')
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Projects\Python/RP/Hybrid-Coding-SNN-main\utils\lib.py", line 431, in dump_json
    json.dump(obj, f, indent=4, sort_keys=False)
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\json\__init__.py", line 179, in dump
    for chunk in iterable:
                 ^^^^^^^^
  File "E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\json\encoder.py", line 433, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\json\encoder.py", line 407, in _iterencode_dict
    yield from chunks
  File "E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\json\encoder.py", line 440, in _iterencode
    o = _default(o)
  File "E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\json\encoder.py", line 180, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
                    f'is not JSON serializable')
TypeError: Object of type Tensor is not JSON serializable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_res20.py", line 250, in <module>
    dump_json(training_record,str(torch.save(snn_ckp_dir)) + 'record', 'cifar10_res20_record_TTFS.pth')
                                  ~~~~~~~~~~^^^^^^^^^^^^^
TypeError: save() missing 1 required positional argument: 'f'

Process finished with exit code 1
