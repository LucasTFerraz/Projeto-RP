E:\Users\lucas\AppData\Local\Programs\Python\Python313\python.exe E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_vgg16.py
GPU is available
['no', 'yes']
 {'no': 0, 'yes': 1}
202
51
E:\Projects\Python\RP\Hybrid-Coding-SNN-main\exp/brain/
Accuracy of pre-trained model 0.9215686274509803
VGG16(
  (conv1): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv2): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool2): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv3): Sequential(
    (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv4): Sequential(
    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool4): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv5): Sequential(
    (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv6): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv7): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool7): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv8): Sequential(
    (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv9): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv10): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool10): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv11): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv12): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv13): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool13): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (fc14): Sequential(
    (0): Linear(in_features=512, out_features=4096, bias=True)
    (1): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (fc15): Sequential(
    (0): Linear(in_features=4096, out_features=4096, bias=True)
    (1): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (fc16): Sequential(
    (0): Linear(in_features=4096, out_features=2, bias=True)
  )
)
Accuracy of BN folded ANN model 0.9215686274509803
Accuracy of converted SNN model tensor([0.4118, 0.4118, 0.4118, 0.4118, 0.4118, 0.4118, 0.4118, 0.4314, 0.4314,
        0.4510, 0.4706, 0.4902, 0.5098, 0.5294, 0.5294, 0.5490],
       device='cuda:0')
------ Stage 1 - Training Hidden Layers ------
Stage1, Epoch 1 takes 0m 20s
Train Accuracy: 0.668317, Loss: 107.451875
Test Accuracy: tensor([0.4118, 0.4118, 0.5098, 0.7059, 0.6078, 0.5882, 0.5882, 0.5882, 0.5882,
        0.5882, 0.5882, 0.5882, 0.5882, 0.5882, 0.5882, 0.5882],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.588235
Stage1, Epoch 2 takes 0m 20s
Train Accuracy: 0.727723, Loss: 104.287359
Test Accuracy: tensor([0.4118, 0.4118, 0.5294, 0.5686, 0.5882, 0.5882, 0.5882, 0.5882, 0.6078,
        0.6078, 0.6078, 0.6078, 0.5882, 0.6078, 0.6078, 0.6078],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.607843
Stage1, Epoch 3 takes 0m 24s
Train Accuracy: 0.717822, Loss: 73.621553
Test Accuracy: tensor([0.4118, 0.4118, 0.4706, 0.6471, 0.6667, 0.6471, 0.6667, 0.6863, 0.6667,
        0.6667, 0.6863, 0.7059, 0.7059, 0.7059, 0.6863, 0.6667],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.666667
Stage1, Epoch 4 takes 0m 23s
Train Accuracy: 0.910891, Loss: 66.521696
Test Accuracy: tensor([0.4118, 0.4118, 0.4902, 0.7255, 0.7647, 0.7647, 0.7647, 0.7647, 0.7843,
        0.8039, 0.8039, 0.8039, 0.8039, 0.8235, 0.8039, 0.8039],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.803922
Stage1, Epoch 5 takes 0m 21s
Train Accuracy: 0.831683, Loss: 61.799107
Test Accuracy: tensor([0.4118, 0.4118, 0.5686, 0.7647, 0.7255, 0.7059, 0.7059, 0.7059, 0.7059,
        0.7059, 0.6863, 0.6863, 0.6863, 0.6863, 0.6863, 0.6863],
       device='cuda:0')
Best Test Accuracy: 0.803922
Stage1, Epoch 6 takes 0m 21s
Train Accuracy: 0.698020, Loss: 55.262653
Test Accuracy: tensor([0.4118, 0.4118, 0.6667, 0.6667, 0.6471, 0.6471, 0.6471, 0.6275, 0.6275,
        0.6275, 0.6275, 0.6471, 0.6471, 0.6471, 0.6471, 0.6471],
       device='cuda:0')
Best Test Accuracy: 0.803922
Stage1, Epoch 7 takes 0m 23s
Train Accuracy: 0.727723, Loss: 46.953042
Test Accuracy: tensor([0.4118, 0.4118, 0.6471, 0.6667, 0.6863, 0.6863, 0.6667, 0.6667, 0.6471,
        0.6667, 0.6863, 0.6863, 0.7059, 0.7059, 0.7059, 0.7059],
       device='cuda:0')
Best Test Accuracy: 0.803922
Stage1, Epoch 8 takes 0m 24s
Train Accuracy: 0.910891, Loss: 39.037284
Test Accuracy: tensor([0.4118, 0.4118, 0.6275, 0.6667, 0.7059, 0.7059, 0.6863, 0.7059, 0.7059,
        0.7255, 0.7255, 0.7451, 0.7451, 0.7451, 0.7451, 0.7451],
       device='cuda:0')
Best Test Accuracy: 0.803922
Stage1, Epoch 9 takes 0m 21s
Train Accuracy: 0.950495, Loss: 34.116168
Test Accuracy: tensor([0.4118, 0.4118, 0.6275, 0.6667, 0.7255, 0.7255, 0.7255, 0.7255, 0.7647,
        0.7647, 0.7647, 0.7843, 0.7843, 0.7843, 0.7843, 0.7843],
       device='cuda:0')
Best Test Accuracy: 0.803922
Stage1, Epoch 10 takes 0m 17s
Train Accuracy: 0.950495, Loss: 29.584619
Test Accuracy: tensor([0.4118, 0.4314, 0.6667, 0.7451, 0.7843, 0.8235, 0.8431, 0.8431, 0.8431,
        0.8431, 0.8431, 0.8431, 0.8431, 0.8431, 0.8431, 0.8431],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.843137
Stage1, Epoch 11 takes 0m 20s
Train Accuracy: 0.940594, Loss: 27.961193
Test Accuracy: tensor([0.4118, 0.4510, 0.6863, 0.7843, 0.8431, 0.8235, 0.8039, 0.8039, 0.8235,
        0.8235, 0.8235, 0.8235, 0.8235, 0.8235, 0.8235, 0.8235],
       device='cuda:0')
Best Test Accuracy: 0.843137
Stage1, Epoch 12 takes 0m 21s
Train Accuracy: 0.950495, Loss: 27.917700
Test Accuracy: tensor([0.4118, 0.4902, 0.7059, 0.7647, 0.8039, 0.7843, 0.8039, 0.8039, 0.8039,
        0.8039, 0.8039, 0.8039, 0.8039, 0.8039, 0.8039, 0.8039],
       device='cuda:0')
Best Test Accuracy: 0.843137
Stage1, Epoch 13 takes 0m 22s
Train Accuracy: 0.955446, Loss: 25.913291
Test Accuracy: tensor([0.4118, 0.4706, 0.7255, 0.7647, 0.7843, 0.8039, 0.8039, 0.8039, 0.8039,
        0.8039, 0.8039, 0.8235, 0.8235, 0.8235, 0.8039, 0.8039],
       device='cuda:0')
Best Test Accuracy: 0.843137
Stage1, Epoch 14 takes 0m 22s
Train Accuracy: 0.950495, Loss: 22.781128
Test Accuracy: tensor([0.4118, 0.4510, 0.6863, 0.7647, 0.8039, 0.8039, 0.8039, 0.8235, 0.8235,
        0.8431, 0.8431, 0.8431, 0.8431, 0.8431, 0.8431, 0.8431],
       device='cuda:0')
Best Test Accuracy: 0.843137
Stage1, Epoch 15 takes 0m 20s
Train Accuracy: 0.955446, Loss: 21.322678
Test Accuracy: tensor([0.4118, 0.4902, 0.7059, 0.7647, 0.7451, 0.7843, 0.8235, 0.8235, 0.8235,
        0.8235, 0.8235, 0.8431, 0.8431, 0.8431, 0.8431, 0.8431],
       device='cuda:0')
Best Test Accuracy: 0.843137
