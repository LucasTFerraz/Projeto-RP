E:\Users\lucas\AppData\Local\Programs\Python\Python313\python.exe E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_vgg16.py
GPU is available
15000 (15000, 32, 32, 3)
3000 (3000, 32, 32, 3)
Accuracy of pre-trained model 0.8496666666666667
VGG16(
  (conv1): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv2): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool2): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv3): Sequential(
    (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv4): Sequential(
    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool4): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv5): Sequential(
    (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv6): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv7): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool7): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv8): Sequential(
    (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv9): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv10): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool10): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv11): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv12): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv13): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool13): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (fc14): Sequential(
    (0): Linear(in_features=512, out_features=4096, bias=True)
    (1): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (fc15): Sequential(
    (0): Linear(in_features=4096, out_features=4096, bias=True)
    (1): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (fc16): Sequential(
    (0): Linear(in_features=4096, out_features=3, bias=True)
  )
)
Accuracy of BN folded ANN model 0.85
Accuracy of converted SNN model tensor([0.3333, 0.3333, 0.3333, 0.3333, 0.3333, 0.3333, 0.3337, 0.3387, 0.3527,
        0.3823, 0.4327, 0.4930, 0.5423, 0.5510, 0.5510, 0.5523],
       device='cuda:0')
------ Stage 1 - Training Hidden Layers ------
Stage1, Epoch 1 takes 6m 48s
Train Accuracy: 0.576067, Loss: 12.131386
Test Accuracy: tensor([0.3333, 0.3350, 0.4663, 0.6770, 0.7310, 0.7487, 0.7643, 0.7703, 0.7783,
        0.7827, 0.7877, 0.7927, 0.7913, 0.7937, 0.7980, 0.7983],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.798333
Stage1, Epoch 2 takes 6m 36s
Train Accuracy: 0.707600, Loss: 6.035410
Test Accuracy: tensor([0.3333, 0.3497, 0.5857, 0.7570, 0.7890, 0.8007, 0.8050, 0.8077, 0.8117,
        0.8140, 0.8157, 0.8173, 0.8180, 0.8167, 0.8170, 0.8180],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.818000
Stage1, Epoch 3 takes 6m 21s
Train Accuracy: 0.724200, Loss: 4.464060
Test Accuracy: tensor([0.3333, 0.3693, 0.6643, 0.7773, 0.8020, 0.8137, 0.8117, 0.8103, 0.8110,
        0.8103, 0.8073, 0.8067, 0.8050, 0.8027, 0.8017, 0.8020],
       device='cuda:0')
Best Test Accuracy: 0.818000
Stage1, Epoch 4 takes 6m 17s
Train Accuracy: 0.726000, Loss: 3.886346
Test Accuracy: tensor([0.3333, 0.3963, 0.6250, 0.6883, 0.7150, 0.7267, 0.7373, 0.7457, 0.7497,
        0.7553, 0.7570, 0.7620, 0.7630, 0.7640, 0.7663, 0.7683],
       device='cuda:0')
Best Test Accuracy: 0.818000
Stage1, Epoch 5 takes 6m 14s
Train Accuracy: 0.717467, Loss: 3.719767
Test Accuracy: tensor([0.3333, 0.3777, 0.6653, 0.7747, 0.8033, 0.8173, 0.8223, 0.8273, 0.8277,
        0.8253, 0.8270, 0.8237, 0.8240, 0.8240, 0.8240, 0.8223],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.822333
Stage1, Epoch 6 takes 6m 31s
Train Accuracy: 0.738467, Loss: 3.129483
Test Accuracy: tensor([0.3333, 0.4143, 0.6977, 0.7717, 0.7957, 0.8020, 0.8107, 0.8153, 0.8187,
        0.8190, 0.8217, 0.8217, 0.8223, 0.8230, 0.8230, 0.8253],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.825333
Stage1, Epoch 7 takes 6m 6s
Train Accuracy: 0.746467, Loss: 2.876013
Test Accuracy: tensor([0.3333, 0.3887, 0.6667, 0.7773, 0.8097, 0.8210, 0.8243, 0.8313, 0.8317,
        0.8313, 0.8323, 0.8323, 0.8330, 0.8313, 0.8323, 0.8313],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.831333
Stage1, Epoch 8 takes 5m 59s
Train Accuracy: 0.744600, Loss: 2.798014
Test Accuracy: tensor([0.3333, 0.4067, 0.6927, 0.7827, 0.8073, 0.8113, 0.8130, 0.8153, 0.8207,
        0.8227, 0.8237, 0.8253, 0.8240, 0.8230, 0.8223, 0.8220],
       device='cuda:0')
Best Test Accuracy: 0.831333
Stage1, Epoch 9 takes 6m 39s
Train Accuracy: 0.721267, Loss: 3.005322
Test Accuracy: tensor([0.3333, 0.4457, 0.7137, 0.8023, 0.8203, 0.8223, 0.8243, 0.8237, 0.8203,
        0.8220, 0.8207, 0.8200, 0.8193, 0.8183, 0.8190, 0.8187],
       device='cuda:0')
Best Test Accuracy: 0.831333
Stage1, Epoch 10 takes 7m 6s
Train Accuracy: 0.730533, Loss: 2.826512
Test Accuracy: tensor([0.3333, 0.4013, 0.6813, 0.7797, 0.8083, 0.8267, 0.8353, 0.8387, 0.8423,
        0.8410, 0.8420, 0.8420, 0.8423, 0.8427, 0.8423, 0.8420],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.842000
Stage1, Epoch 11 takes 6m 6s
Train Accuracy: 0.736800, Loss: 2.626521
Test Accuracy: tensor([0.3333, 0.4437, 0.7107, 0.7957, 0.8217, 0.8317, 0.8367, 0.8397, 0.8407,
        0.8407, 0.8410, 0.8413, 0.8410, 0.8417, 0.8427, 0.8403],
       device='cuda:0')
Best Test Accuracy: 0.842000
Stage1, Epoch 12 takes 6m 40s
Train Accuracy: 0.743867, Loss: 2.492012
Test Accuracy: tensor([0.3333, 0.4230, 0.6693, 0.7720, 0.7953, 0.7950, 0.7940, 0.7927, 0.7937,
        0.7940, 0.7930, 0.7967, 0.7940, 0.7930, 0.7923, 0.7907],
       device='cuda:0')
Best Test Accuracy: 0.842000
Stage1, Epoch 13 takes 5m 58s
Train Accuracy: 0.741200, Loss: 2.542114
Test Accuracy: tensor([0.3333, 0.5223, 0.7647, 0.7973, 0.7847, 0.7723, 0.7653, 0.7533, 0.7490,
        0.7467, 0.7480, 0.7457, 0.7430, 0.7423, 0.7427, 0.7427],
       device='cuda:0')
Best Test Accuracy: 0.842000
Stage1, Epoch 14 takes 6m 31s
Train Accuracy: 0.736733, Loss: 2.452064
Test Accuracy: tensor([0.3333, 0.4677, 0.7127, 0.7883, 0.8133, 0.8250, 0.8310, 0.8363, 0.8377,
        0.8377, 0.8377, 0.8397, 0.8400, 0.8413, 0.8420, 0.8420],
       device='cuda:0')
Best Test Accuracy: 0.842000
Stage1, Epoch 15 takes 6m 58s
Train Accuracy: 0.740600, Loss: 2.440111
Test Accuracy: tensor([0.3333, 0.4473, 0.6907, 0.7937, 0.8187, 0.8333, 0.8370, 0.8390, 0.8403,
        0.8420, 0.8427, 0.8430, 0.8410, 0.8437, 0.8413, 0.8413],
       device='cuda:0')
Best Test Accuracy: 0.842000
------ Stage 2 - Training Output Layer ------
Batch 100, Train Acc 74.6146, Train Loss 1.1890, Avg spike time 14.2113, spike probability 0.0653
Traceback (most recent call last):
  File "E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_vgg16.py", line 191, in <module>
    TTFS_model, acc_train, loss_train = training_snn_TTFS(snn, TTFS_model, train_loader, optimizer, criterion_out, alpha, beta, device, Tencode, args.threshold)
                                        ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Projects\Python\RP\Hybrid-Coding-SNN-main\utils\classification.py", line 226, in training_snn_TTFS
    _, out = snn.forward(inputs, SNN=True, TTFS=True)
             ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Projects\Python\RP\Hybrid-Coding-SNN-main\models\vgg16.py", line 124, in forward
    x10 = self.conv10(x10_input)
  File "E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\site-packages\torch\nn\modules\module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\site-packages\torch\nn\modules\module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
  File "E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\site-packages\torch\nn\modules\container.py", line 240, in forward
    input = module(input)
  File "E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\site-packages\torch\nn\modules\module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\site-packages\torch\nn\modules\module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
  File "E:\Projects\Python\RP\Hybrid-Coding-SNN-main\utils\modules.py", line 25, in forward
    x = self.neuron(x)
  File "E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\site-packages\torch\nn\modules\module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\site-packages\torch\nn\modules\module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
  File "E:\Projects\Python\RP\Hybrid-Coding-SNN-main\utils\modules.py", line 50, in forward
    self.mem = self.mem - self.spike * self.threshold
    ^^^^^^^^
  File "E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\site-packages\torch\nn\modules\module.py", line 1944, in __setattr__
    def __setattr__(self, name: str, value: Union[Tensor, "Module"]) -> None:

KeyboardInterrupt

Process finished with exit code -1073741510 (0xC000013A: interrupted by Ctrl+C)
