E:\Users\lucas\AppData\Local\Programs\Python\Python313\python.exe E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_res20.py
GPU is available
Epochs : 15
['irish_wolfhound', 'scottish_deerhound']
 {'irish_wolfhound': 0, 'scottish_deerhound': 1}
145
36
Accuracy of pre-trained model 0.6944444444444444
ResNet20(
  (conv1): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv2): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv3): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (layer4): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer5): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer6): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential(
      (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
  )
  (layer7): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer8): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential(
      (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
  )
  (layer9): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer10): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential(
      (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
  )
  (layer11): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (pool12): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (fc13): Sequential(
    (0): Linear(in_features=2048, out_features=16384, bias=True)
    (1): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (linear): Linear(in_features=16384, out_features=2, bias=False)
)
Accuracy of BN folded ANN model 0.6944444444444444
Accuracy of converted SNN model tensor([0.4167, 0.4167, 0.4167, 0.4167, 0.4167, 0.4167, 0.4167, 0.4167, 0.4167,
        0.3889, 0.4167, 0.4444, 0.4722, 0.4444, 0.4722, 0.4444],
       device='cuda:0')
------ Stage 1 - Training Hidden Layers ------
Start 1
Trained 1
Stage1, Epoch 1 takes 0m 16s
Train Accuracy: 0.703448, Loss: 364.263641
Test Accuracy: tensor([0.4167, 0.4167, 0.4167, 0.4722, 0.6389, 0.6111, 0.5833, 0.5833, 0.5833,
        0.5833, 0.5833, 0.5833, 0.5833, 0.5833, 0.5833, 0.5833],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.583333
Start 2
Trained 2
Stage1, Epoch 2 takes 0m 19s
Train Accuracy: 0.489655, Loss: 528.286542
Test Accuracy: tensor([0.4167, 0.4167, 0.4722, 0.5278, 0.6389, 0.5833, 0.5833, 0.5833, 0.5833,
        0.5833, 0.5833, 0.5833, 0.5833, 0.5833, 0.5833, 0.5833],
       device='cuda:0')
Best Test Accuracy: 0.583333
Start 3
Trained 3
Stage1, Epoch 3 takes 0m 16s
Train Accuracy: 0.489655, Loss: 450.980798
Test Accuracy: tensor([0.4167, 0.4167, 0.4444, 0.5278, 0.5278, 0.5556, 0.5833, 0.5556, 0.5556,
        0.5833, 0.5833, 0.5833, 0.5833, 0.5833, 0.5833, 0.5833],
       device='cuda:0')
Best Test Accuracy: 0.583333
Start 4
Trained 4
Stage1, Epoch 4 takes 0m 18s
Train Accuracy: 0.524138, Loss: 407.385376
Test Accuracy: tensor([0.4167, 0.4167, 0.4722, 0.5556, 0.5556, 0.6389, 0.6389, 0.6389, 0.5833,
        0.5556, 0.5556, 0.5556, 0.5833, 0.6111, 0.6111, 0.6111],
       device='cuda:0')sw
Saving the model.
Best Test Accuracy: 0.611111
Start 5
Trained 5
Stage1, Epoch 5 takes 0m 17s
Train Accuracy: 0.662069, Loss: 371.278839
Test Accuracy: tensor([0.4167, 0.4167, 0.4444, 0.5278, 0.5000, 0.5278, 0.5278, 0.5556, 0.5833,
        0.5556, 0.5556, 0.5833, 0.6389, 0.6667, 0.6667, 0.6667],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.666667
Start 6
Trained 6
Stage1, Epoch 6 takes 0m 19s
Train Accuracy: 0.641379, Loss: 341.506061
Test Accuracy: tensor([0.4167, 0.4167, 0.4722, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000,
        0.5000, 0.5000, 0.5278, 0.5556, 0.5278, 0.5278, 0.5556],
       device='cuda:0')
Best Test Accuracy: 0.666667
Start 7
Trained 7
Stage1, Epoch 7 takes 0m 18s
Train Accuracy: 0.620690, Loss: 303.260712
Test Accuracy: tensor([0.4167, 0.4167, 0.4722, 0.5000, 0.5000, 0.5000, 0.4722, 0.5000, 0.5278,
        0.5278, 0.5556, 0.5833, 0.5833, 0.5833, 0.5833, 0.5833],
       device='cuda:0')
Best Test Accuracy: 0.666667
Start 8
Trained 8
Stage1, Epoch 8 takes 0m 15s
Train Accuracy: 0.627586, Loss: 279.908636
Test Accuracy: tensor([0.4167, 0.4167, 0.4444, 0.5000, 0.5000, 0.4722, 0.4722, 0.4722, 0.5278,
        0.5278, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000, 0.5000],
       device='cuda:0')
Best Test Accuracy: 0.666667
Start 9
Trained 9
Stage1, Epoch 9 takes 0m 18s
Train Accuracy: 0.655172, Loss: 264.991013
Test Accuracy: tensor([0.4167, 0.4167, 0.4722, 0.5278, 0.5278, 0.5278, 0.5000, 0.5000, 0.5000,
        0.4722, 0.4722, 0.4722, 0.4722, 0.4722, 0.4722, 0.4722],
       device='cuda:0')
Best Test Accuracy: 0.666667
Start 10
Trained 10
Stage1, Epoch 10 takes 0m 16s
Train Accuracy: 0.641379, Loss: 255.392642
Test Accuracy: tensor([0.4167, 0.4167, 0.5000, 0.5278, 0.5278, 0.5278, 0.5000, 0.5000, 0.5000,
        0.5000, 0.5000, 0.5000, 0.4722, 0.4722, 0.4722, 0.4722],
       device='cuda:0')
Best Test Accuracy: 0.666667
Start 11
Trained 11
Stage1, Epoch 11 takes 0m 19s
Train Accuracy: 0.648276, Loss: 237.212653
Test Accuracy: tensor([0.4167, 0.4167, 0.5000, 0.5278, 0.5000, 0.5000, 0.5278, 0.5833, 0.5556,
        0.5556, 0.5556, 0.5556, 0.5556, 0.5556, 0.5556, 0.5556],
       device='cuda:0')
Best Test Accuracy: 0.666667
Start 12
Trained 12
Stage1, Epoch 12 takes 0m 17s
Train Accuracy: 0.682759, Loss: 220.217548
Test Accuracy: tensor([0.4167, 0.4444, 0.5278, 0.5000, 0.5278, 0.5556, 0.5556, 0.6111, 0.5833,
        0.6111, 0.6111, 0.6111, 0.6111, 0.6111, 0.6111, 0.6111],
       device='cuda:0')
Best Test Accuracy: 0.666667
Start 13
Trained 13
Stage1, Epoch 13 takes 0m 18s
Train Accuracy: 0.662069, Loss: 215.354718
Test Accuracy: tensor([0.4167, 0.4722, 0.5556, 0.5278, 0.5000, 0.5000, 0.5278, 0.5278, 0.5278,
        0.5278, 0.5000, 0.5278, 0.5278, 0.5278, 0.5278, 0.5278],
       device='cuda:0')
Best Test Accuracy: 0.666667
Start 14
Trained 14
Stage1, Epoch 14 takes 0m 19s
Train Accuracy: 0.662069, Loss: 209.105396
Test Accuracy: tensor([0.4167, 0.4722, 0.5278, 0.5278, 0.5000, 0.4722, 0.5000, 0.5278, 0.5556,
        0.5556, 0.5833, 0.5833, 0.5833, 0.5833, 0.5556, 0.5833],
       device='cuda:0')
Best Test Accuracy: 0.666667
Start 15
Trained 15
Stage1, Epoch 15 takes 0m 18s
Train Accuracy: 0.682759, Loss: 196.264941
Test Accuracy: tensor([0.4167, 0.4444, 0.5278, 0.5278, 0.4722, 0.4722, 0.5000, 0.5000, 0.5000,
        0.5000, 0.5278, 0.5278, 0.5278, 0.5278, 0.5278, 0.5556],
       device='cuda:0')
Best Test Accuracy: 0.666667
------ Stage 2 - Training Output Layer ------
Train loss 0:  1.6194515466690063
Train loss:  0.8097257733345031 0.0
Train correct / total:  5 145
Stage2, Epoch 1 takes 0m 8s
Train Accuracy: 0.4897, Loss: 1.6195
Test Accuracy: 0.6111, Test spiking time: 5.0000
Accuracy: 0.6111, Average spike time: 5.0000, Best acc: 0.6667, Best acc spike time: 16.0000
Traceback (most recent call last):
  File "E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_res20.py", line 280, in <module>
    'best_acc': best_test_acc.item()#,
                ^^^^^^^^^^^^^^^^^^
AttributeError: 'float' object has no attribute 'item'

Process finished with exit code 1
