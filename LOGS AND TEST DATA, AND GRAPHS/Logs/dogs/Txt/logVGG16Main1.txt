E:\Users\lucas\AppData\Local\Programs\Python\Python313\python.exe E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_vgg16.py
GPU is available
['irish_wolfhound', 'scottish_deerhound']
 {'irish_wolfhound': 0, 'scottish_deerhound': 1}
145
36
E:\Projects\Python\RP\Hybrid-Coding-SNN-main\exp/dogs/
Accuracy of pre-trained model 0.7222222222222222
VGG16(
  (conv1): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv2): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool2): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv3): Sequential(
    (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv4): Sequential(
    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool4): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv5): Sequential(
    (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv6): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv7): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool7): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv8): Sequential(
    (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv9): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv10): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool10): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv11): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv12): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv13): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool13): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (fc14): Sequential(
    (0): Linear(in_features=512, out_features=4096, bias=True)
    (1): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (fc15): Sequential(
    (0): Linear(in_features=4096, out_features=4096, bias=True)
    (1): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (fc16): Sequential(
    (0): Linear(in_features=4096, out_features=2, bias=True)
  )
)
Accuracy of BN folded ANN model 0.7222222222222222
Accuracy of converted SNN model tensor([0.5833, 0.5833, 0.5833, 0.5833, 0.5833, 0.5833, 0.5833, 0.5833, 0.5833,
        0.5556, 0.5833, 0.5833, 0.5833, 0.6111, 0.6389, 0.6389],
       device='cuda:0')
------ Stage 1 - Training Hidden Layers ------
Stage1, Epoch 1 takes 0m 13s
Train Accuracy: 0.903448, Loss: 113.665863
Test Accuracy: tensor([0.5833, 0.5833, 0.5833, 0.5556, 0.5278, 0.5833, 0.5833, 0.5833, 0.6111,
        0.6389, 0.6667, 0.6667, 0.6667, 0.6667, 0.6667, 0.6944],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.694444
Stage1, Epoch 2 takes 0m 13s
Train Accuracy: 0.689655, Loss: 150.962881
Test Accuracy: tensor([0.5833, 0.5833, 0.5833, 0.4444, 0.5556, 0.5833, 0.6111, 0.6389, 0.6389,
        0.6389, 0.6389, 0.6389, 0.6111, 0.6111, 0.6111, 0.6111],
       device='cuda:0')
Best Test Accuracy: 0.694444
Stage1, Epoch 3 takes 0m 15s
Train Accuracy: 0.813793, Loss: 115.598515
Test Accuracy: tensor([0.5833, 0.5833, 0.5278, 0.5000, 0.4722, 0.5556, 0.5278, 0.5278, 0.5000,
        0.5556, 0.5556, 0.5833, 0.5833, 0.6111, 0.6111, 0.6111],
       device='cuda:0')
Best Test Accuracy: 0.694444
Stage1, Epoch 4 takes 0m 15s
Train Accuracy: 0.793103, Loss: 95.138249
Test Accuracy: tensor([0.5833, 0.5833, 0.5833, 0.4167, 0.4444, 0.4444, 0.4444, 0.4444, 0.4722,
        0.4722, 0.5000, 0.5278, 0.5556, 0.5278, 0.5278, 0.5556],
       device='cuda:0')
Best Test Accuracy: 0.694444
Stage1, Epoch 5 takes 0m 14s
Train Accuracy: 0.717241, Loss: 94.958298
Test Accuracy: tensor([0.5833, 0.5833, 0.5833, 0.5000, 0.4167, 0.4444, 0.4444, 0.4167, 0.4722,
        0.5000, 0.5278, 0.5278, 0.5833, 0.5833, 0.5833, 0.5833],
       device='cuda:0')
Best Test Accuracy: 0.694444
Stage1, Epoch 6 takes 0m 17s
Train Accuracy: 0.813793, Loss: 83.931097
Test Accuracy: tensor([0.5833, 0.5833, 0.5833, 0.6944, 0.5556, 0.5833, 0.6111, 0.6111, 0.6111,
        0.6667, 0.6389, 0.6389, 0.6389, 0.6389, 0.6389, 0.6389],
       device='cuda:0')
Best Test Accuracy: 0.694444
Stage1, Epoch 7 takes 0m 16s
Train Accuracy: 0.896552, Loss: 78.650560
Test Accuracy: tensor([0.5833, 0.5833, 0.5833, 0.5833, 0.7222, 0.7222, 0.7222, 0.7222, 0.7222,
        0.7222, 0.6944, 0.6667, 0.6389, 0.6389, 0.6389, 0.6389],
       device='cuda:0')
Best Test Accuracy: 0.694444
Stage1, Epoch 8 takes 0m 15s
Train Accuracy: 0.889655, Loss: 76.607436
Test Accuracy: tensor([0.5833, 0.5833, 0.5833, 0.6111, 0.6667, 0.6667, 0.6667, 0.6389, 0.6389,
        0.6667, 0.6389, 0.6389, 0.6389, 0.6667, 0.6667, 0.6667],
       device='cuda:0')
Best Test Accuracy: 0.694444
Stage1, Epoch 9 takes 0m 13s
Train Accuracy: 0.862069, Loss: 71.707711
Test Accuracy: tensor([0.5833, 0.5833, 0.5833, 0.6944, 0.7222, 0.6944, 0.6944, 0.6944, 0.6944,
        0.6944, 0.6944, 0.6667, 0.6667, 0.6667, 0.6667, 0.6667],
       device='cuda:0')
Best Test Accuracy: 0.694444
Stage1, Epoch 10 takes 0m 14s
Train Accuracy: 0.875862, Loss: 63.037873
Test Accuracy: tensor([0.5833, 0.5833, 0.5833, 0.6944, 0.7222, 0.7222, 0.7500, 0.7500, 0.7500,
        0.7500, 0.7500, 0.7500, 0.7500, 0.7500, 0.7500, 0.7500],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.750000
Stage1, Epoch 11 takes 0m 15s
Train Accuracy: 0.882759, Loss: 56.519537
Test Accuracy: tensor([0.5833, 0.5833, 0.6111, 0.7222, 0.7222, 0.7222, 0.7222, 0.7222, 0.7222,
        0.7500, 0.7500, 0.7500, 0.7500, 0.7500, 0.7500, 0.7500],
       device='cuda:0')
Best Test Accuracy: 0.750000
Stage1, Epoch 12 takes 0m 15s
Train Accuracy: 0.882759, Loss: 47.345898
Test Accuracy: tensor([0.5833, 0.5833, 0.6111, 0.6111, 0.6667, 0.6667, 0.6944, 0.6944, 0.6667,
        0.6667, 0.6667, 0.6944, 0.6944, 0.6944, 0.6944, 0.6944],
       device='cuda:0')
Best Test Accuracy: 0.750000
Stage1, Epoch 13 takes 0m 16s
Train Accuracy: 0.910345, Loss: 42.648982
Test Accuracy: tensor([0.5833, 0.5833, 0.6111, 0.6111, 0.6944, 0.6667, 0.6667, 0.6389, 0.6389,
        0.6389, 0.6389, 0.6389, 0.6389, 0.6389, 0.6111, 0.6111],
       device='cuda:0')
Best Test Accuracy: 0.750000
Stage1, Epoch 14 takes 0m 15s
Train Accuracy: 0.917241, Loss: 37.219056
Test Accuracy: tensor([0.5833, 0.5833, 0.5833, 0.6111, 0.6667, 0.6111, 0.6111, 0.6111, 0.6111,
        0.6111, 0.6389, 0.6667, 0.6667, 0.6667, 0.6667, 0.6944],
       device='cuda:0')
Best Test Accuracy: 0.750000
Stage1, Epoch 15 takes 0m 14s
Train Accuracy: 0.924138, Loss: 36.757063
Test Accuracy: tensor([0.5833, 0.5833, 0.6111, 0.6944, 0.6389, 0.6111, 0.6389, 0.6389, 0.6389,
        0.6389, 0.6667, 0.6667, 0.6389, 0.6389, 0.6389, 0.6111],
       device='cuda:0')
Best Test Accuracy: 0.750000
------ Stage 2 - Training Output Layer ------
Train loss 0:  1.7212214708328246
Train loss:  0.8606107354164123 0.0
Train correct / total:  5 145
Stage2, Epoch 1 takes 0m 6s
Train Accuracy: 0.5379, Loss: 1.7212
Test Accuracy: 0.6111, Test spiking time: 4.0000
Accuracy: 0.6111, Average spike time: 4.0000, Best acc: 0.7500, Best acc spike time: 16.0000
Traceback (most recent call last):
  File "E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_vgg16.py", line 273, in <module>
    'best_acc': best_test_acc.item(),
                ^^^^^^^^^^^^^^^^^^
AttributeError: 'float' object has no attribute 'item'

Process finished with exit code 1
