E:\Users\lucas\AppData\Local\Programs\Python\Python313\python.exe E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_res20.py
GPU is available
Epochs : 15
['10_Caterpie', '11_Metapod', '12_Butterfree', '13_Weedle', '14_Kakuna', '15_Beedrill', '16_Pidgey', '17_Pidgeotto', '18_Pidgeot', '19_Rattata', '1_Bulbasaur', '20_Raticate', '21_Spearow', '22_Fearow', '23_Ekans', '24_Arbok', '25_Pikachu', '26_Raichu', '27_Sandshrew', '28_Sandslash', '29_Nidoran_female', '2_Ivysaur', '30_Nidorina', '31_Nidoqueen', '32_Nidoran_male', '33_Nidorino', '34_Nidoking', '35_Clefairy', '36_Clefable', '37_Vulpix', '38_Ninetales', '3_Venusaur', '4_Charmander', '5_Charmeleon', '6_Charizard', '7_Squirtle', '8_Wartortle', '9_Blastoise']
 {'10_Caterpie': 0, '11_Metapod': 1, '12_Butterfree': 2, '13_Weedle': 3, '14_Kakuna': 4, '15_Beedrill': 5, '16_Pidgey': 6, '17_Pidgeotto': 7, '18_Pidgeot': 8, '19_Rattata': 9, '1_Bulbasaur': 10, '20_Raticate': 11, '21_Spearow': 12, '22_Fearow': 13, '23_Ekans': 14, '24_Arbok': 15, '25_Pikachu': 16, '26_Raichu': 17, '27_Sandshrew': 18, '28_Sandslash': 19, '29_Nidoran_female': 20, '2_Ivysaur': 21, '30_Nidorina': 22, '31_Nidoqueen': 23, '32_Nidoran_male': 24, '33_Nidorino': 25, '34_Nidoking': 26, '35_Clefairy': 27, '36_Clefable': 28, '37_Vulpix': 29, '38_Ninetales': 30, '3_Venusaur': 31, '4_Charmander': 32, '5_Charmeleon': 33, '6_Charizard': 34, '7_Squirtle': 35, '8_Wartortle': 36, '9_Blastoise': 37}
5066
1267
Accuracy of pre-trained model 0.4151539068666141
E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\site-packages\PIL\Image.py:1054: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  warnings.warn(
ResNet20(
  (conv1): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv2): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv3): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (layer4): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer5): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer6): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential(
      (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
  )
  (layer7): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer8): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential(
      (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
  )
  (layer9): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (layer10): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential(
      (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
  )
  (layer11): BasicBlock(
    (conv1): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (conv2): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): StraightThrough()
      (2): ScaledNeuron(
        (neuron): BurstNode()
      )
    )
    (shortcut): Sequential()
  )
  (pool12): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (fc13): Sequential(
    (0): Linear(in_features=512, out_features=4096, bias=True)
    (1): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (linear): Linear(in_features=4096, out_features=38, bias=False)
)
Accuracy of BN folded ANN model 0.4151539068666141
Accuracy of converted SNN model tensor([0.0300, 0.0268, 0.0268, 0.0268, 0.0268, 0.0268, 0.0300, 0.0379, 0.0418,
        0.0497, 0.0545, 0.0576, 0.0616, 0.0679, 0.0742, 0.0821],
       device='cuda:0')
------ Stage 1 - Training Hidden Layers ------
Start 1
Trained 1
Stage1, Epoch 1 takes 2m 59s
Train Accuracy: 0.095144, Loss: 289.523036
Test Accuracy: tensor([0.0300, 0.0268, 0.0355, 0.0560, 0.0647, 0.0663, 0.0702, 0.0781, 0.0813,
        0.0868, 0.0908, 0.0923, 0.0931, 0.0916, 0.0939, 0.0955],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.095501
Start 2
Trained 2
Stage1, Epoch 2 takes 2m 53s
Train Accuracy: 0.271615, Loss: 153.067873
Test Accuracy: tensor([0.0300, 0.0268, 0.0860, 0.1697, 0.2226, 0.2534, 0.2707, 0.2818, 0.2818,
        0.2849, 0.2818, 0.2770, 0.2810, 0.2833, 0.2826, 0.2826],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.282557
Start 3
Trained 3
Stage1, Epoch 3 takes 2m 46s
Train Accuracy: 0.589222, Loss: 93.034381
Test Accuracy: tensor([0.0300, 0.0316, 0.1105, 0.1871, 0.2470, 0.2873, 0.3015, 0.3220, 0.3307,
        0.3323, 0.3315, 0.3307, 0.3354, 0.3362, 0.3354, 0.3339],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.333860
Start 4
Trained 4
Stage1, Epoch 4 takes 2m 56s
Train Accuracy: 0.808527, Loss: 65.458582
Test Accuracy: tensor([0.0300, 0.0379, 0.1342, 0.2076, 0.2660, 0.2897, 0.3197, 0.3489, 0.3654,
        0.3710, 0.3781, 0.3804, 0.3844, 0.3820, 0.3796, 0.3796],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.379637
Start 5
Trained 5
Stage1, Epoch 5 takes 2m 53s
Train Accuracy: 0.921634, Loss: 52.748905
Test Accuracy: tensor([0.0300, 0.0403, 0.1247, 0.1997, 0.2549, 0.2952, 0.3204, 0.3449, 0.3560,
        0.3607, 0.3646, 0.3694, 0.3796, 0.3741, 0.3804, 0.3828],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.382794
Start 6
Trained 6
Stage1, Epoch 6 takes 3m 1s
Train Accuracy: 0.958745, Loss: 46.294023
Test Accuracy: tensor([0.0300, 0.0466, 0.1571, 0.2265, 0.2826, 0.3149, 0.3354, 0.3489, 0.3552,
        0.3702, 0.3710, 0.3741, 0.3765, 0.3804, 0.3765, 0.3828],
       device='cuda:0')
Best Test Accuracy: 0.382794
Start 7
Trained 7
Stage1, Epoch 7 takes 2m 55s
Train Accuracy: 0.978484, Loss: 42.205488
Test Accuracy: tensor([0.0300, 0.0505, 0.1492, 0.2376, 0.2920, 0.3197, 0.3323, 0.3441, 0.3528,
        0.3639, 0.3678, 0.3670, 0.3749, 0.3796, 0.3796, 0.3844],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.384373
Start 8
Trained 8
Stage1, Epoch 8 takes 3m 23s
Train Accuracy: 0.984406, Loss: 39.299573
Test Accuracy: tensor([0.0300, 0.0489, 0.1555, 0.2376, 0.2857, 0.3228, 0.3449, 0.3504, 0.3631,
        0.3662, 0.3741, 0.3773, 0.3781, 0.3812, 0.3812, 0.3812],
       device='cuda:0')
Best Test Accuracy: 0.384373
Start 9
Trained 9
Stage1, Epoch 9 takes 2m 59s
Train Accuracy: 0.990130, Loss: 36.769469
Test Accuracy: tensor([0.0300, 0.0576, 0.1752, 0.2573, 0.3086, 0.3291, 0.3473, 0.3591, 0.3702,
        0.3717, 0.3812, 0.3828, 0.3915, 0.3915, 0.3899, 0.3867],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.386740
Start 10
Trained 10
Stage1, Epoch 10 takes 2m 52s
Train Accuracy: 0.995460, Loss: 35.009875
Test Accuracy: tensor([0.0300, 0.0560, 0.1705, 0.2407, 0.2818, 0.3189, 0.3418, 0.3552, 0.3654,
        0.3710, 0.3781, 0.3788, 0.3812, 0.3844, 0.3852, 0.3875],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.387530
Start 11
Trained 11
Stage1, Epoch 11 takes 2m 57s
Train Accuracy: 0.993881, Loss: 33.664790
Test Accuracy: tensor([0.0300, 0.0584, 0.1657, 0.2368, 0.2833, 0.3141, 0.3346, 0.3473, 0.3623,
        0.3725, 0.3757, 0.3828, 0.3828, 0.3867, 0.3923, 0.3907],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.390687
Start 12
Trained 12
Stage1, Epoch 12 takes 2m 53s
Train Accuracy: 0.997829, Loss: 31.837977
Test Accuracy: tensor([0.0300, 0.0545, 0.1634, 0.2478, 0.2897, 0.3181, 0.3410, 0.3481, 0.3631,
        0.3765, 0.3788, 0.3820, 0.3836, 0.3836, 0.3860, 0.3883],
       device='cuda:0')
Best Test Accuracy: 0.390687
Start 13
Trained 13
Stage1, Epoch 13 takes 2m 54s
Train Accuracy: 0.998026, Loss: 30.717869
Test Accuracy: tensor([0.0300, 0.0552, 0.1665, 0.2336, 0.2873, 0.3133, 0.3354, 0.3528, 0.3662,
        0.3781, 0.3820, 0.3836, 0.3844, 0.3860, 0.3875, 0.3860],
       device='cuda:0')
Best Test Accuracy: 0.390687
Start 14
Trained 14
Stage1, Epoch 14 takes 2m 53s
Train Accuracy: 0.998421, Loss: 29.733307
Test Accuracy: tensor([0.0300, 0.0584, 0.1800, 0.2549, 0.3015, 0.3370, 0.3575, 0.3741, 0.3836,
        0.3875, 0.3883, 0.3891, 0.3899, 0.3915, 0.3883, 0.3962],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.396212
Start 15
Trained 15
Stage1, Epoch 15 takes 2m 50s
Train Accuracy: 0.998618, Loss: 28.895242
Test Accuracy: tensor([0.0300, 0.0655, 0.1807, 0.2628, 0.3157, 0.3386, 0.3567, 0.3717, 0.3852,
        0.3891, 0.3915, 0.3954, 0.3978, 0.3970, 0.4009, 0.3954],
       device='cuda:0')
Best Test Accuracy: 0.396212
------ Stage 2 - Training Output Layer ------
Train loss 0:  20.557482099533082
Train loss:  9.419643807411195 1.7181944847106934
Train correct / total:  40 5066
Stage2, Epoch 1 takes 0m 46s
Train Accuracy: 0.2009, Loss: 20.5575
Test Accuracy: 0.1847, Test spiking time: 16.0000
Accuracy: 0.1847, Average spike time: 16.0000, Best acc: 0.3962, Best acc spike time: 16.0000
Traceback (most recent call last):
  File "E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_res20.py", line 271, in <module>
    'best_acc': best_test_acc.item()#,
                ^^^^^^^^^^^^^^^^^^
AttributeError: 'float' object has no attribute 'item'

Process finished with exit code 1
