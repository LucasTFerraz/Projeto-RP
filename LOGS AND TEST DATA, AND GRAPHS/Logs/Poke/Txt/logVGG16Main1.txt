E:\Users\lucas\AppData\Local\Programs\Python\Python313\python.exe E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_vgg16.py
GPU is available
['10_Caterpie', '11_Metapod', '12_Butterfree', '13_Weedle', '14_Kakuna', '15_Beedrill', '16_Pidgey', '17_Pidgeotto', '18_Pidgeot', '19_Rattata', '1_Bulbasaur', '20_Raticate', '21_Spearow', '22_Fearow', '23_Ekans', '24_Arbok', '25_Pikachu', '26_Raichu', '27_Sandshrew', '28_Sandslash', '29_Nidoran_female', '2_Ivysaur', '30_Nidorina', '31_Nidoqueen', '32_Nidoran_male', '33_Nidorino', '34_Nidoking', '35_Clefairy', '36_Clefable', '37_Vulpix', '38_Ninetales', '3_Venusaur', '4_Charmander', '5_Charmeleon', '6_Charizard', '7_Squirtle', '8_Wartortle', '9_Blastoise']
 {'10_Caterpie': 0, '11_Metapod': 1, '12_Butterfree': 2, '13_Weedle': 3, '14_Kakuna': 4, '15_Beedrill': 5, '16_Pidgey': 6, '17_Pidgeotto': 7, '18_Pidgeot': 8, '19_Rattata': 9, '1_Bulbasaur': 10, '20_Raticate': 11, '21_Spearow': 12, '22_Fearow': 13, '23_Ekans': 14, '24_Arbok': 15, '25_Pikachu': 16, '26_Raichu': 17, '27_Sandshrew': 18, '28_Sandslash': 19, '29_Nidoran_female': 20, '2_Ivysaur': 21, '30_Nidorina': 22, '31_Nidoqueen': 23, '32_Nidoran_male': 24, '33_Nidorino': 25, '34_Nidoking': 26, '35_Clefairy': 27, '36_Clefable': 28, '37_Vulpix': 29, '38_Ninetales': 30, '3_Venusaur': 31, '4_Charmander': 32, '5_Charmeleon': 33, '6_Charizard': 34, '7_Squirtle': 35, '8_Wartortle': 36, '9_Blastoise': 37}
5066
1267
E:\Projects\Python\RP\Hybrid-Coding-SNN-main\exp/Poke/
Accuracy of pre-trained model 0.6748224151539068
E:\Users\lucas\AppData\Local\Programs\Python\Python313\Lib\site-packages\PIL\Image.py:1054: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images
  warnings.warn(
VGG16(
  (conv1): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv2): Sequential(
    (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool2): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv3): Sequential(
    (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv4): Sequential(
    (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool4): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv5): Sequential(
    (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv6): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv7): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool7): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv8): Sequential(
    (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv9): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv10): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool10): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (conv11): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv12): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (conv13): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): StraightThrough()
    (2): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (pool13): AvgPool2d(kernel_size=2, stride=2, padding=0)
  (fc14): Sequential(
    (0): Linear(in_features=512, out_features=4096, bias=True)
    (1): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (fc15): Sequential(
    (0): Linear(in_features=4096, out_features=4096, bias=True)
    (1): ScaledNeuron(
      (neuron): BurstNode()
    )
  )
  (fc16): Sequential(
    (0): Linear(in_features=4096, out_features=38, bias=True)
  )
)
Accuracy of BN folded ANN model 0.6748224151539068
Accuracy of converted SNN model tensor([0.0260, 0.0260, 0.0260, 0.0260, 0.0260, 0.0513, 0.0552, 0.0726, 0.0994,
        0.1271, 0.1579, 0.1910, 0.2265, 0.2526, 0.2865, 0.3244],
       device='cuda:0')
------ Stage 1 - Training Hidden Layers ------
Stage1, Epoch 1 takes 2m 48s
Train Accuracy: 0.471378, Loss: 48.795629
Test Accuracy: tensor([0.0260, 0.0679, 0.3275, 0.3938, 0.4278, 0.4515, 0.4728, 0.4815, 0.4838,
        0.4909, 0.4878, 0.4862, 0.4933, 0.4941, 0.4925, 0.4917],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.491713
Stage1, Epoch 2 takes 2m 27s
Train Accuracy: 0.821753, Loss: 19.000983
Test Accuracy: tensor([0.0260, 0.2691, 0.4388, 0.4878, 0.5185, 0.5351, 0.5485, 0.5635, 0.5675,
        0.5738, 0.5714, 0.5730, 0.5730, 0.5738, 0.5730, 0.5746],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.574586
Stage1, Epoch 3 takes 2m 27s
Train Accuracy: 0.931702, Loss: 12.428739
Test Accuracy: tensor([0.0260, 0.3102, 0.4838, 0.5406, 0.5564, 0.5809, 0.5833, 0.5864, 0.5825,
        0.5856, 0.5896, 0.5904, 0.5904, 0.5912, 0.5919, 0.5919],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.591949
Stage1, Epoch 4 takes 2m 34s
Train Accuracy: 0.962890, Loss: 10.000341
Test Accuracy: tensor([0.0260, 0.3260, 0.4909, 0.5414, 0.5651, 0.5801, 0.5951, 0.6046, 0.6038,
        0.6093, 0.6093, 0.6101, 0.6148, 0.6125, 0.6101, 0.6093],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.609313
Stage1, Epoch 5 takes 2m 28s
Train Accuracy: 0.971575, Loss: 8.860414
Test Accuracy: tensor([0.0260, 0.3307, 0.5091, 0.5612, 0.5825, 0.5967, 0.6077, 0.6054, 0.6101,
        0.6156, 0.6180, 0.6196, 0.6188, 0.6180, 0.6164, 0.6164],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.616417
Stage1, Epoch 6 takes 2m 32s
Train Accuracy: 0.965259, Loss: 8.457726
Test Accuracy: tensor([0.0260, 0.3433, 0.5241, 0.5651, 0.5809, 0.5959, 0.5991, 0.5983, 0.6054,
        0.6093, 0.6046, 0.6077, 0.6093, 0.6093, 0.6101, 0.6117],
       device='cuda:0')
Best Test Accuracy: 0.616417
Stage1, Epoch 7 takes 2m 24s
Train Accuracy: 0.967627, Loss: 7.839211
Test Accuracy: tensor([0.0260, 0.3473, 0.4933, 0.5454, 0.5651, 0.5754, 0.5872, 0.5935, 0.6006,
        0.6062, 0.6093, 0.6109, 0.6156, 0.6140, 0.6117, 0.6125],
       device='cuda:0')
Best Test Accuracy: 0.616417
Stage1, Epoch 8 takes 2m 31s
Train Accuracy: 0.976510, Loss: 7.241725
Test Accuracy: tensor([0.0260, 0.3544, 0.5067, 0.5509, 0.5809, 0.5896, 0.5959, 0.6038, 0.6038,
        0.6085, 0.6085, 0.6093, 0.6148, 0.6172, 0.6172, 0.6156],
       device='cuda:0')
Best Test Accuracy: 0.616417
Stage1, Epoch 9 takes 2m 30s
Train Accuracy: 0.976510, Loss: 6.845247
Test Accuracy: tensor([0.0260, 0.3796, 0.5454, 0.5833, 0.6022, 0.6164, 0.6227, 0.6314, 0.6314,
        0.6330, 0.6354, 0.6330, 0.6330, 0.6346, 0.6330, 0.6314],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.631413
Stage1, Epoch 10 takes 2m 30s
Train Accuracy: 0.972562, Loss: 6.727587
Test Accuracy: tensor([0.0260, 0.3773, 0.5359, 0.5793, 0.5983, 0.6156, 0.6235, 0.6243, 0.6259,
        0.6290, 0.6322, 0.6314, 0.6314, 0.6322, 0.6322, 0.6314],
       device='cuda:0')
Best Test Accuracy: 0.631413
Stage1, Epoch 11 takes 2m 45s
Train Accuracy: 0.971180, Loss: 6.619095
Test Accuracy: tensor([0.0260, 0.3268, 0.5217, 0.5691, 0.5919, 0.6030, 0.6046, 0.6093, 0.6140,
        0.6156, 0.6164, 0.6188, 0.6196, 0.6204, 0.6212, 0.6204],
       device='cuda:0')
Best Test Accuracy: 0.631413
Stage1, Epoch 12 takes 2m 30s
Train Accuracy: 0.973549, Loss: 6.309571
Test Accuracy: tensor([0.0260, 0.3757, 0.5478, 0.5872, 0.5991, 0.6101, 0.6204, 0.6267, 0.6259,
        0.6283, 0.6259, 0.6267, 0.6235, 0.6267, 0.6235, 0.6227],
       device='cuda:0')
Best Test Accuracy: 0.631413
Stage1, Epoch 13 takes 2m 35s
Train Accuracy: 0.985985, Loss: 5.739717
Test Accuracy: tensor([0.0260, 0.3646, 0.5383, 0.5683, 0.5951, 0.6093, 0.6188, 0.6212, 0.6283,
        0.6322, 0.6346, 0.6338, 0.6338, 0.6338, 0.6377, 0.6338],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.633781
Stage1, Epoch 14 takes 2m 19s
Train Accuracy: 0.985590, Loss: 5.621505
Test Accuracy: tensor([0.0260, 0.3804, 0.5588, 0.6006, 0.6212, 0.6354, 0.6448, 0.6440, 0.6464,
        0.6448, 0.6472, 0.6504, 0.6472, 0.6480, 0.6488, 0.6480],
       device='cuda:0')
Saving the model.
Best Test Accuracy: 0.647987
Stage1, Epoch 15 takes 2m 36s
Train Accuracy: 0.987762, Loss: 5.373205
Test Accuracy: tensor([0.0260, 0.3733, 0.5817, 0.6046, 0.6243, 0.6227, 0.6275, 0.6330, 0.6361,
        0.6346, 0.6338, 0.6354, 0.6346, 0.6369, 0.6361, 0.6361],
       device='cuda:0')
Best Test Accuracy: 0.647987
------ Stage 2 - Training Output Layer ------
Train loss 0:  5.913665308142608
Train loss:  2.918366290488333 0.03846636613092895
Train correct / total:  53 5066
Traceback (most recent call last):
  File "E:\Projects\Python\RP\Hybrid-Coding-SNN-main\CIFAR10\Hybrid_coding\cifar10_main_vgg16.py", line 235, in <module>
    'best_acc': best_test_acc.item(),
                ^^^^^^^^^^^^^^^^^^
AttributeError: 'float' object has no attribute 'item'
Stage2, Epoch 1 takes 1m 15s
Train Accuracy: 0.3265, Loss: 5.9137
Test Accuracy: 0.4815, Test spiking time: 6.6740
Accuracy: 0.4815, Average spike time: 6.6740, Best acc: 0.6480, Best acc spike time: 16.0000

Process finished with exit code 1
